<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/12/hexo-github-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
    <url>/2025/03/12/hexo-github-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>下面是一个更为详细、完善的 Hexo 博客部署教程，不仅涵盖了基本的安装、配置、生成与部署步骤，还增加了常见问题的解决、主题设置和使用 SSH 方式部署的补充说明，供你参考和使用：</p><hr><h2 id="一、安装-Hexo、Node-js-和-Git-部署插件"><a href="#一、安装-Hexo、Node-js-和-Git-部署插件" class="headerlink" title="一、安装 Hexo、Node.js 和 Git 部署插件"></a>一、安装 Hexo、Node.js 和 Git 部署插件</h2><h3 id="1-1-安装-Node-js"><a href="#1-1-安装-Node-js" class="headerlink" title="1.1 安装 Node.js"></a>1.1 安装 Node.js</h3><p>确保你的系统已经安装 Node.js（建议使用 LTS 版本），可以从 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装。</p><h3 id="1-2-全局安装-Hexo-CLI"><a href="#1-2-全局安装-Hexo-CLI" class="headerlink" title="1.2 全局安装 Hexo CLI"></a>1.2 全局安装 Hexo CLI</h3><p>使用 npm 安装 Hexo CLI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli  <span class="hljs-comment"># 全局安装 Hexo CLI</span><br></code></pre></td></tr></table></figure><h3 id="1-3-初始化-Hexo-博客"><a href="#1-3-初始化-Hexo-博客" class="headerlink" title="1.3 初始化 Hexo 博客"></a>1.3 初始化 Hexo 博客</h3><p>在合适的目录下初始化一个新博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog         <span class="hljs-comment"># 初始化博客目录</span><br><span class="hljs-built_in">cd</span> myblog<br>npm install              <span class="hljs-comment"># 安装依赖</span><br></code></pre></td></tr></table></figure><h3 id="1-4-安装-Git-部署插件"><a href="#1-4-安装-Git-部署插件" class="headerlink" title="1.4 安装 Git 部署插件"></a>1.4 安装 Git 部署插件</h3><p>安装 Hexo 的 Git 部署插件，用于将生成的静态文件推送到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><hr><h2 id="二、配置-Hexo"><a href="#二、配置-Hexo" class="headerlink" title="二、配置 Hexo"></a>二、配置 Hexo</h2><h3 id="2-1-修改博客配置文件"><a href="#2-1-修改博客配置文件" class="headerlink" title="2.1 修改博客配置文件"></a>2.1 修改博客配置文件</h3><p>打开项目根目录下的 <code>_config.yml</code> 文件，找到或添加 <code>deploy</code> 部分，并根据你的 GitHub 仓库信息进行修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/你的GitHub用户名/你的仓库名.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span>  <span class="hljs-comment"># 或者 master，取决于 GitHub Pages 的分支设置</span><br>  <span class="hljs-comment"># 可选：自定义提交信息</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;部署 Hexo 博客，更新于 $(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：如果你希望使用 SSH 方式部署，请将 <code>repo</code> 修改为类似 <code>git@github.com:你的GitHub用户名/你的仓库名.git</code> 的格式，并确保你的本机已配置好 SSH key 并添加至 GitHub。</p></blockquote><h3 id="2-2-常见配置项补充"><a href="#2-2-常见配置项补充" class="headerlink" title="2.2 常见配置项补充"></a>2.2 常见配置项补充</h3><ul><li><strong>url</strong>：配置你的博客访问域名，例如 <code>https://yourdomain.com</code>，方便生成正确的链接。  </li><li><strong>root</strong>：如果你的博客部署在子目录下（例如 GitHub Pages 的 <code>username.github.io/repo</code>），请设置相应的根路径。  </li><li><strong>其他设置</strong>：可根据需求调整 Hexo 的其它配置，如文章摘要长度、分页数等。</li></ul><hr><h2 id="三、生成静态文件并部署到-GitHub"><a href="#三、生成静态文件并部署到-GitHub" class="headerlink" title="三、生成静态文件并部署到 GitHub"></a>三、生成静态文件并部署到 GitHub</h2><h3 id="3-1-生成静态文件"><a href="#3-1-生成静态文件" class="headerlink" title="3.1 生成静态文件"></a>3.1 生成静态文件</h3><p>在 Hexo 项目根目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g<br></code></pre></td></tr></table></figure><p>这条命令会清理之前生成的文件，然后根据源文件生成最新的静态页面。</p><h3 id="3-2-部署到-GitHub"><a href="#3-2-部署到-GitHub" class="headerlink" title="3.2 部署到 GitHub"></a>3.2 部署到 GitHub</h3><p>生成静态文件后，运行以下命令部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>部署过程中，如果是首次部署，可能会要求输入 GitHub 账号和密码，或者你需要提前配置 SSH key。</p><h3 id="3-3-自动化部署脚本"><a href="#3-3-自动化部署脚本" class="headerlink" title="3.3 自动化部署脚本"></a>3.3 自动化部署脚本</h3><p>你可以将生成与部署命令写入脚本文件，便于以后快速部署。示例脚本 <code>deploy.sh</code> 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 清理旧文件</span><br>hexo clean<br><span class="hljs-comment"># 生成新文件</span><br>hexo g<br><span class="hljs-comment"># 部署到 GitHub Pages</span><br>hexo d<br></code></pre></td></tr></table></figure><p>记得给脚本执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x deploy.sh<br></code></pre></td></tr></table></figure><p>以后只需运行 <code>./deploy.sh</code> 即可完成部署。</p><hr><h2 id="四、使用主题美化界面"><a href="#四、使用主题美化界面" class="headerlink" title="四、使用主题美化界面"></a>四、使用主题美化界面</h2><h3 id="4-1-选择并安装主题"><a href="#4-1-选择并安装主题" class="headerlink" title="4.1 选择并安装主题"></a>4.1 选择并安装主题</h3><p>Hexo 拥有大量开源主题，你可以在 <a href="https://hexo.io/themes/">Hexo 主题库</a> 中选择适合你的主题。本文以 <strong>fuild</strong> 主题为例，安装步骤大致如下：</p><ol><li>下载 fuild 主题并放入博客的 <code>themes</code> 目录下。</li><li>修改根目录下的 <code>_config.yml</code> 文件，将 <code>theme</code> 参数设置为 <code>fuild</code>：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fuild</span><br></code></pre></td></tr></table></figure></li><li>根据主题的文档进行个性化配置，如配色、导航、社交链接等。</li></ol><h3 id="4-2-主题二次定制"><a href="#4-2-主题二次定制" class="headerlink" title="4.2 主题二次定制"></a>4.2 主题二次定制</h3><p>若需要进一步美化博客，可以修改主题提供的配置文件（通常位于 <code>themes/fuild/_config.yml</code>）或直接调整主题源代码。推荐查阅主题的 README 及文档以了解更多自定义选项。</p><hr><h2 id="五、常见问题与解决方案"><a href="#五、常见问题与解决方案" class="headerlink" title="五、常见问题与解决方案"></a>五、常见问题与解决方案</h2><h3 id="5-1-SSH-部署遇到权限问题"><a href="#5-1-SSH-部署遇到权限问题" class="headerlink" title="5.1 SSH 部署遇到权限问题"></a>5.1 SSH 部署遇到权限问题</h3><ul><li>确保本机生成 SSH key，并在 GitHub 上添加该公钥。  </li><li>检查 <code>repo</code> 是否设置为 SSH 格式（如 <code>git@github.com:xxx/xxx.git</code>）。</li></ul><h3 id="5-2-部署后页面未更新"><a href="#5-2-部署后页面未更新" class="headerlink" title="5.2 部署后页面未更新"></a>5.2 部署后页面未更新</h3><ul><li>检查 <code>_config.yml</code> 中的 <code>branch</code> 配置是否正确。  </li><li>查看 GitHub Pages 的部署设置，确认分支名称与 GitHub Pages 服务对应。  </li><li>可以尝试手动刷新浏览器缓存，或在仓库设置中重新触发 Pages 部署。</li></ul><h3 id="5-3-文章生成与排版问题"><a href="#5-3-文章生成与排版问题" class="headerlink" title="5.3 文章生成与排版问题"></a>5.3 文章生成与排版问题</h3><ul><li>若文章中出现格式问题，检查 Markdown 语法是否正确。  </li><li>更新 Hexo 及相关依赖版本，确保与主题的兼容性。</li></ul><hr><h2 id="六、部署后的扩展与维护"><a href="#六、部署后的扩展与维护" class="headerlink" title="六、部署后的扩展与维护"></a>六、部署后的扩展与维护</h2><h3 id="6-1-自动部署"><a href="#6-1-自动部署" class="headerlink" title="6.1 自动部署"></a>6.1 自动部署</h3><p>你可以利用 CI&#x2F;CD 工具（如 GitHub Actions）实现每次更新自动生成并部署 Hexo 博客，减少手动操作。GitHub Actions 允许你在代码 push 后自动运行脚本完成静态文件生成和部署，具体流程可参考相关文档。</p><h3 id="6-2-数据备份与版本控制"><a href="#6-2-数据备份与版本控制" class="headerlink" title="6.2 数据备份与版本控制"></a>6.2 数据备份与版本控制</h3><ul><li>定期备份 Hexo 源文件以及 <code>_config.yml</code> 配置。  </li><li>利用 Git 的版本控制功能，方便回滚和对比修改历史。</li></ul><hr><p>这样，一个完整且详细的 Hexo 部署到 GitHub Pages 的流程就完成了！通过本文档，你不仅可以轻松部署博客，还能在后续根据需求进行主题定制与自动化维护，让博客更加稳定和美观。希望这份教程能帮助你打造个性化、专业的博客！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
